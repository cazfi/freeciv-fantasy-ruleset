; This is minimal units ruleset. Replace <modpack> with your module name in
; description.

[datafile]
description = "<modpack> unit_type data for Freeciv"
options = "+Freeciv-ruleset-3.2-Devel-2022.Feb.02"
format_version = 30

[control]
; Names for custom unit type flags. There can be up to 45 of these.
; name          = rule name; In some circumstances user may see this
;                 as part of some sentences, so try to make it descriptive
;                 and sensible.
; helptxt       = displayed in the help for unit types with this flag (optional)
flags =   { "name", "helptxt"
            _("Cities") , _("can build cities, the unit is consumed in the process")
   }

; Names for custom unit class flags. There can be up to 15 of these.
; name          = rule name; In some circumstances user may see this
;                 as part of some sentences, so try to make it descriptive
;                 and sensible.
; helptxt       = displayed in the help for unit types belonging to a class
;                 with this flag (optional)
;class_flags =
;  { "name", "helptxt"
;  }

[veteran_system]
; What are the names of the levels?
veteran_names = _("green") , _("experienced") , _("veteran"), _("elite"), _("legendary")

; The percentage chance of increasing level through combat
veteran_base_raise_chance = 10,10,0,0,0

; Power factors are as a percentage.
; +50% is represented by 150
veteran_power_fact = 100,200,300,400,1000

; The percentage chance of a settler/engineer increasing level through
; performing useful work (per turn)
veteran_work_raise_chance = 0,0,0,0,0

; The additional number of movement points granted for different veteran
; levels. These are fractional move points as defined by move_fragments in
; terrain.ruleset.
veteran_move_bonus = 0,0,0,0,0

; /* <-- avoid gettext warnings
;
; Unit classes
; The number can be variable, up to 32
; When adding new classes, remember to check effects.ruleset also.
; Eg. if you divide class 'Land' to two separate classes, you may
; want add effect giving City Walls defence bonus against new class
; too.
;
; The actual tag used (the * in [unitclass_*]) does not matter, except
; it must be unique within this file, and it may be used in debug
; output when reading this file.
;
; ** Fields **
;
; name                = translatable name as seen by user
; rule_name           = (optional) internal name for savegames, rulesets etc;
;                       if not present, "name" is used for this purpose too.
;                       Since the name used in savegames must not change, if
;                       you want to rename an item after a ruleset has been
;                       released, you should set "rule_name" to the original
;                       value of "name".
; min_speed           = Minimum speed after damage and effects (whole movement points)
; hp_loss_pct         = Hitpoints lost each turn if unit not in city or native base
; non_native_def_pct  = Defense power percentage applying when defending on
;                       non-native terrain (such as ship in harbour)
; flags               = List of unit class flags (from the following list; you
;                       cannot add custom unit class flags)
; helptext            = optional help text string; should escape all raw newlines
;                       so that xgettext parsing works
;
; ** Unit class Flags **
;
; "TerrainSpeed"      = Units use terrain specific speed
; "TerrainDefense"    = Units gain defense bonus from terrain
; "DamageSlows"       = Damaged units are slowed down
; "CanOccupyCity"     = Military units of this class can occupy enemy cities
; "BuildAnywhere"     = Unit can be built even in the middle of non-native terrain
; "Unreachable"       = Unit can be attacked only by units explicitly listing this
;                       class in its 'targets', unless on a city or native base.
;                       For class members which are transports, cargo cannot load/
;                       unload except in a city or native base, unless that unit
;                       explicitly lists this class in its 'embarks'/'disembarks'.
; "CollectRansom"     = Unit can collect ransom when killing lone barbarian leader
; "ZOC"               = Unit is subject to ZOC rules. Unit type flag "IgZOC" can
;                       override this
; "DoesntOccupyTile"  = Even if this kind of enemy unit is on tile, cities can
;                       still work that tile
; "AttackNonNative"   = Unit can attack units on non-native tiles. Unit type flag
;                       "Only_Native_Attack" can override this
; "KillCitizen"       = Upon successful attack against a city unit kills one citizen.
;                       There's server setting, as well as effects, to disable this.
; "HutFrighten"       = Will frighten rather than enter huts.
; "NonNatBombardTgt"  = Certain attacks against these units are considered
;                       Nonnative Bombard Attack type
;
; */ <-- avoid gettext warnings

[unitclass_land]
name          = _("Land")
min_speed     = 2
hp_loss_pct   = 0
non_native_def_pct = 100
flags         = "CanOccupyCity","CollectRansom","DamageSlows","KillCitizen","TerrainSpeed","TerrainDefense","ZOC"

[unitclass_sea]
name          = _("Sea")
min_speed     = 2
hp_loss_pct   = 0
non_native_def_pct = 100
flags         = "AttackNonNative","CanOccupyCity","CollectRansom","DamageSlows","KillCitizen","TerrainSpeed","ZOC"

[unitclass_air]
name = _("Air")
min_speed = 4
hp_loss_pct = 0
non_native_def_pct = 100
flags = "AttackNonNative","CollectRansom","KillCitizen","Unreachable","HutFrighten"

*include "scifi/units/starter.ruleset"
